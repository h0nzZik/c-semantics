#!/usr/bin/env perl
use strict;
use warnings;

use File::Basename;
use File::Temp qw(SEEK_END tempfile tempdir);
use File::Spec::Functions qw(rel2abs catfile);
use File::Copy;
use File::Path qw(rmtree);
use MIME::Base64;
use String::Escape qw(quote backslash);
use Getopt::Declare;
use Cwd qw(abs_path getcwd);
use UUID::Tiny qw(:std);


# Here we trap control-c (and others) so we can clean up when that happens.
$SIG{'ABRT'} = 'interruptHandler';
$SIG{'TERM'} = 'interruptHandler';
$SIG{'QUIT'} = 'interruptHandler';
$SIG{'SEGV'} = 'interruptHandler';
$SIG{'HUP' } = 'interruptHandler';
$SIG{'TRAP'} = 'interruptHandler';
$SIG{'STOP'} = 'interruptHandler';
$SIG{'INT'} = 'interruptHandler'; # Handle control-c.

my $RVMAIN = '__rvmatch_main'; # Symbol 'main' gets rewritten to in natively-compiled code.
my $MAGIC = "\x7fKAST";

my @objFiles = ();
my @nativeObjFiles = ();
my @trampolineFiles = ();
my @nativeLibs = ();
my @srcFiles = ();

my $symbols;
our @cppArgs = ();
our @ld_lib = ();
our @ldArgs = ('-lmpfr', '-lgmp', '-lffi', '-lm', '-ldl', '-Wl,--no-as-needed', '-u', $RVMAIN);

if ((split /\./, `gcc -dumpversion`)[0] + 0 >= 5) { # gcc version >= 5
  push @ldArgs, '-no-pie';
}

my $distDirectory = dirname(rel2abs($0));
if (defined $ENV{KCC_COMMAND_NAME}) {
  $0 = $ENV{KCC_COMMAND_NAME};
} else {
  $0 = basename($0);
}

our $profile = do {
  local $/ = undef;
  open my $fh, '<', catfile($distDirectory, 'current-profile')
    or error("Couldn't find current profile: please fix " . catfile($distDirectory, 'current-profile') . ".\n");
  <$fh>;
};

my $profileDirectory = catfile($distDirectory, $profile);
my $use_interpreter = -e catfile($profileDirectory, 'cpp14-translation-kompiled', 'cpp14-translation-kompiled', 'interpreter');
my $use_compile = -e catfile($profileDirectory, 'c11-cpp14-kompiled', 'c11-cpp14-kompiled', 'execution_partial.o');

our $buildNumber = do {
  local $/ = undef;
  if (open my $fh, '<', catfile($distDirectory, 'build-number')) {
    <$fh>;
  } else { ''; }
};

our $isRelease = $buildNumber ne '';

our $defaultProfile = do {
  local $/ = undef;
  open my $fh, '<', catfile($distDirectory, 'default-profile')
    or error("Couldn't find default profile: please fix " . catfile($distDirectory, 'default-profile') . ".\n");
  <$fh>;
};

opendir (my $DIR, $distDirectory);
our @profiles = ();
while ( my $entry = readdir $DIR) {
  next unless -d $distDirectory . '/' . $entry;
  next if $entry eq '.' or $entry eq '..' or $entry eq 'licenses';
  push(@profiles, $entry);
}

my $ignoredFlagsRegex = "^(";
{
  my $sep = "";
  open my $fh, '<', catfile($distDirectory, 'ignored-flags')
    or error("Couldn't load ignored flag list. Please touch " . catfile($distDirectory, 'ignored-flags') . ".\n");
  while (<$fh>) {
    chop($_);
    $ignoredFlagsRegex = "$ignoredFlagsRegex$sep(?:$_)";
    $sep = "|";
  }
  $ignoredFlagsRegex = "$ignoredFlagsRegex)\$";
}
my $ignoredFlags = qr/$ignoredFlagsRegex/;

my $cygwin = $^O eq "cygwin" || $^O eq "msys";
my $quoteString = "\"String\"";
my $quoteInt = "\"Int\"";
if ($cygwin) {
  $distDirectory = `cygpath -w $distDirectory`;
  $profileDirectory = `cygpath -w $profileDirectory`;
  chop($distDirectory);
  chop($profileDirectory);
  $quoteString = backslash($quoteString);
  $quoteInt = backslash($quoteInt);
}

my $krun;
my $printf;
if ($cygwin) {
  $krun = 'krun.bat';
  $printf = 'printf %%s';
} else {
  $krun = 'krun';
  $printf = 'printf %s';
}

our $ourDist = $distDirectory;

my $cparser = catfile($distDirectory, 'cparser');
my $cppparser = catfile($distDirectory, 'clang-kast');

my $C_TRANS_DEF = catfile($profileDirectory, "c11-translation-kompiled");
my $CPP_TRANS_DEF = catfile($profileDirectory, "cpp14-translation-kompiled");

my @originalArgv;

my @cppWarnsList = (
  "import",
  "char-subscripts",
  "comment",
  "format",
  "format-y3k",
  "format-extra-args",
  "format-zero-length",
  "format-nonliteral",
  "format-security",
  "format=3",
  "nonnull",
  "init-self",
  "implicit-int",
  "implicit-function-declaration",
  "error-implicit-function-declaration",
  "implicit",
  "main",
  "missing-braces",
  "parentheses",
  "sequence-point",
  "return-type",
  "switch",
  "switch-default",
  "switch-enum",
  "trigraphs",
  "unused-function",
  "unused-label",
  "unused-parameter",
  "unused-variable",
  "unused-value",
  "unused",
  "uninitialized",
  "unknown-pragmas",
  "strict-aliasing",
  "all",
  "extra",
  "div-by-zero",
  "system-headers",
  "float-equal",
  "traditional",
  "declaration-after-statement",
  "undef",
  "endif-labels",
  "shadow",
  "larger-than-len",
  "pointer-arith",
  "bad-function-cast",
  "cast-qual",
  "cast-align",
  "write-strings",
  "conversion",
  "sign-compare",
  "aggregate-return",
  "strict-prototypes",
  "old-style-definition",
  "missing-prototypes",
  "missing-declarations",
  "missing-noreturn",
  "missing-format-attribute",
  "multichar",
  "deprecated-declarations",
  "packed",
  "padded",
  "redundant-decls",
  "nested-externs",
  "unreachable-code",
  "inline",
  "invalid-pch",
  "long-long",
  "disabled-optimization",
  "error"
);
our %cppWarns =  map { $_ => 1 } @cppWarnsList;

our @suppress = ();
our @ifdef = ();
our $fatalErrors = "false";
our $xLang = "none";
my $hasStdin;
my $hasBuiltins;

our $oflag;

my $encodedJson;
my $args;

exit main();

sub main {
  @originalArgv = @ARGV;
  if ($originalArgv[-1] eq '-Xk++') {
    # special case for k++ wrapper script which we don't want
    # to display as an argument
    pop(@originalArgv);
  }
  my $self = ({});
  sub usage {}
  bless $self;
  my $_args = ();
  my $_get_nextline = sub { undef };
  foreach (@ARGV) {
    # Clean entries: remove spaces, tabs and newlines
    $_ =~ tr/ \t\n/\0\0\0/;
  }
  $_args = join(' ', @ARGV);
  my $source = '';
  $self->{_internal}{args} = (());
  $self->{_internal}{args}[0]{required} = 1;
  $self->{_internal}{args}[0]{desc} = "<files>...";
=for Getopt::Declare
  [strict]
  -version		Show version information. [undocumented]
    {
      print("\n	" . $0 . ": version 1.0 GNU-compatible\n\n");
      if ($main::isRelease) {
            print("	Build number: $main::buildNumber\n");
      }
      my $profiles = join("\n	                    ", @main::profiles);
      print("	Current profile: $main::profile\n	Installed profiles: $profiles\n	Default profile: $main::defaultProfile\n\n	To request additional profiles, contact runtimeverification.com/support.\n\n");
      exit 0;
    }
  -Version		[ditto] [undocumented]
  -VERSION		[ditto] [undocumented]
  --version		[ditto] [undocumented]
  --Version		[ditto] [undocumented]
  --VERSION		[ditto] [undocumented]
  -v			[ditto] [undocumented]
  -V			[ditto] [undocumented]
  -help			Show this message. [undocumented]
    {
      print Getopt::Declare::usage_string($self);
      exit 0;
    }
  -Help			[ditto] [undocumented]
  -HELP			[ditto] [undocumented]
  --help		[ditto] [undocumented]
  --Help		[ditto] [undocumented]
  --HELP		[ditto] [undocumented]
  -h			[ditto] [undocumented]
  -H			[ditto] [undocumented]
  -c			Compile and assemble, but do not link.
  -shared		Compile and assemble into a single object file.
  -d			Print debugging information.
  -D <name>[=[<definition>]]	Predefine <name> as a macro, with definition
				<definition>.
    {
      if (defined $definition) {
        push(@main::cppArgs, "-D$name=$definition");
      } elsif ($_PUNCT_{"="}) {
        push(@main::cppArgs, "-D$name=");
      } else  {
        push(@main::cppArgs, "-D$name");
      }
    }
  -U <name>		Undefine <name> as a macro.
    { push(@main::cppArgs, "-U$name"); }
  -P			Inhibit preprocessor line numbers.
    { push(@main::cppArgs, "-P"); }
  -E			Preprocess only.
  -I <dir>		Look for headers in <dir>.
    { push(@main::cppArgs, '-I', $dir); }
  -idirafter <dir>	Look for headers in <dir>, but only after directories
			specified with -I and system directories.
    { push(@main::cppArgs, '-idirafter', $dir); }
  -iquote <dir>		Look for headers with quotation marks in <dir>.
    { push(@main::cppArgs, '-iquote', $dir); }
  -isystem <dir>	Look for system headers in <dir>.
    { push(@main::cppArgs, '-isystem', $dir); }
  -include <file>	Add header to file during preprocessing.
    { push(@main::cppArgs, '-include', $file); }
  -L <dir>		Look for shared libraries in <dir>.
    {
      push(@main::ld_lib, $dir);
      push(@main::ldArgs, "-L$dir");
    }
  -nodefaultlibs	Do not link against the standard library.
  -std=<std>		Standard to use when building internally with
			GCC for inline assembly. Not used by kcc directly.
  -o <file>		Place the output into <file>.
    { $main::oflag = $file; }
  -l <lib>		Link semantics against library in search path.
    { classifyLib($lib); }
  -Wl,<args>		Add flags to linker arguments.
    { push(@main::ldArgs, "-Wl,$args"); }
  -u <symbol>		Pretend <symbol> is undefined, to force linking.
    { push(@main::ldArgs, '-u', $symbol); }
  <files>...		C files to be compiled. [repeatable] [required] [undocumented]
    { classify(@files); }
  -M			Dependency generation. See documentation for GCC
			preprocessor.
    { push(@main::cppArgs, '-M'); }
  -MM			Dependency generation. See documentation for GCC
			preprocessor.
    { push(@main::cppArgs, '-MM'); }
  -MD			Dependency generation. See documentation for GCC
			preprocessor.
    { push(@main::cppArgs, '-MD'); }
  -MMD			Dependency generation. See documentation for GCC
			preprocessor.
    { push(@main::cppArgs, '-MMD'); }
  -MP			Dependency generation. See documentation for GCC
			preprocessor.
    { push(@main::cppArgs, '-MP'); }
  -MF <file>		Dependency generation. See documentation for GCC
			preprocessor.
    { push(@main::cppArgs, '-MF', $file); }
  -MT <target>		Dependency generation. See documentation for GCC
			preprocessor.
    { push(@main::cppArgs, '-MT', $target); }
  -d<chars>		Debugging info from preprocessor. See documentation
			for GCC.
    { push(@main::cppArgs, "-d$chars"); }
  -ftranslation-depth=<depth>	Compile program up to a given depth. [undocumented]
  -fmessage-length=0	Write all error messages on a single line.
  -frunner-script	Compile program to perl script with analysis tool options. [undocumented]
  -fissue-report=<file>	Write issues to the specified file.
			Format (CSV/JSON) is inferred from the specified file extension.
  -Wlint		Generate lint errors for potentially undesirable
			behaviors.*
    {
      push(@main::suppress, '{"condition": ["Category", "LintError"], "suppress": false}');
    }
  -flint		Generate lint errors for potentially undesirable
			behaviors.*
    {
      push(@main::suppress, '{"condition": ["Category", "LintError"], "suppress": false}');
    }
  -Wno-undefined	Do not output undefined behaviors.*
    {
      push(@main::suppress, '{"condition": ["Category", ["Undefined", "C"]], "suppress": true}' .
                           ',{"condition": ["Category", ["Undefined", "CPP"]], "suppress": true}');
    }
  -Wno-unspecified	Do not output unspecified behaviors.*
    {
      push(@main::suppress, '{"condition": ["Category", ["Unspecified", "C"]], "suppress": true}' .
                           ',{"condition": ["Category", ["Unspecified", "CPP"]], "suppress": true}');
    }
  -Wno-implementation-defined	Do not output implementation-defined behaviors.*
    {
      push(@main::suppress, '{"condition": ["Category", ["ImplementationDefined", "C"]], "suppress": true}' .
                           ',{"condition": ["Category", ["ImplementationDefined", "CPP"]], "suppress": true}');
    }
  -Wno-<errcode>	Ignore specified error code.*
    {
      if ($main::cppWarns{$errcode}) {
        push(@main::cppArgs, "-Wno-$errcode");
      } else {
        push(@main::suppress, '{"condition": ["ErrorId", "' . $errcode . '"], "suppress": true}');
      }
    }
  -Wsystem-headers	Do not ignore errors in system headers.*
    {
      push(@main::cppArgs, "-Wsystem-headers");
      push(@main::suppress, '{"condition": ["SystemHeader", true], "suppress": false}');
    }
  -Wfatal-errors	Do not recover from errors reported by tool.*
    {
      push(@main::cppArgs, "-Wfatal-errors");
      $main::fatalErrors = "true";
    }
  -W		[undocumented]
  -W<errcode>		Do not ignore specified error code.*
    {
      if ($main::cppWarns{$errcode}) {
        push(@main::cppArgs, "-W$errcode");
      } else {
        push(@main::suppress, '{"condition": ["ErrorId", "' . $errcode . '"], "suppress": false}');
      }
    }
  -Wno-ifdef=<macro>	Disable errors on lines emitted when <macro> is
			defined.*
    {
      push(@main::ifdef, [$macro, "D", "true"]);
    }
  -Wno-ifndef=<macro>	Disable errors on lines emitted when <macro>
 is not
			defined.*
    {
      push(@main::ifdef, [$macro, "U", "true"]);
    }
  -Wno-file=<glob>	Disable errors in files matching <glob>.*
    {
      push(@main::suppress, '{"condition": ["File", ' . quote(backslash($glob)) . '], "suppress": true}');
    }
  -no-pedantic		Do not trigger preprocessor warnings for non-standard
			compliant language features.
  -w			Ignore all preprocessor warnings.
    { push(@main::cppArgs, "-w"); }
  -fheap-size=<size>	Used with -flint to detect dynamic memory overflow.*
  -fstack-size=<size>	Used with -flint to detect stack overflow.*
  -frecover-all-errors	Recover from fatal errors that would normally cause an
			application to crash.
			WARNING: This can change the semantics of tools like
			autoconf which analyze the exit code of the compiler to
			trigger unexpected or undesirable results.
  -fno-native-compilation	Disables compilation of code with native
				compiler in order to improve error reporting in
				programs which fail to compile under the native
				compiler.
				WARNING: Due to technical limitations this also
				disables support for inline assembly.
  -fnative-binary	Build a standalone binary containing only the native code
			needed to execute native functions for the application
			when linking. Slower, but avoids symbol conflicts
			when compiling C code that is part of the RV-Match runtime.
			For the purposes of optimization, you must pass this flag
			during both compilation and linking. [undocumented]
  -fuse-native-std-lib	Use native implementations instead of semantics when
			interpreting calls to standard library functions.
  -x <language>		Set language for input files.
    { $main::xLang = $language; }
  -pthread		Enables pthread library (experimental)
    {
      push(@main::cppArgs, '-pthread');
      push(@main::ldArgs, '-lpthread');
    }
  -Xmx<size>		Passed to underlying JVM. [undocumented]
  -profile <name>	Set KCC profile.
    {
      if ( grep( /^$name$/, @main::profiles ) ) {
         open(my $file, '>', "$main::ourDist/current-profile")
           or error("Could not open profile file. Check OS permissions.\n");
         print $file $name;
         close $file;
         exit 0;
      } else {
         print "Profile '$name' is not installed. See $0 -v for list of installed profiles.\n";
         exit 1;
      }
    }
  --no-license-message	Do not print any licensing information. Use this
                        option if extra output interferes with a build system.
                        Setting the environment error KCC_NO_LICENCE_MESSAGE
                        has the same effect.
  -Xbuiltins		[undocumented]
  -Xk++			[undocumented]
  -soname <name>	[undocumented]

  * Indicates flags that require RV-Match from
    http://www.runtimeverification.com/match to run.

  For a complete list of other flags ignored by ) . "$0, refer to\n  $distDirectory" . q(/ignored-flags,
  which contains one regular expression per line.

  The following lines of output are added to this message for compatibility
  with GNU ld and libtool:

  : supported targets: elf
=cut

 or error("Failed to parse the command line.\n");
$args = $self;

  my $noLicense = exists($args->{'--no-license-message'})
    || defined($ENV{'KCC_NO_LICENSE_MESSAGE'});

  my $msg = '';

  my $format;
  my $output;
  if ($args->{"-fissue-report="}) {
    my ($file) = $args->{"-fissue-report="};
    my ($base, $dir, $ext) = fileparse($file, ('\.json', '\.JSON', '\.csv', '\.CSV'));
    if (!$ext) {
      error("Format not supported for the issue report file '$file'.
The format for the issue report (JSON/CSV) is inferred from the file extension.
");
    }
    $format = uc substr($ext,1);
    $output = quote(backslash(abs_path($file)));
    $output = ", \"output\": $output";
  } else {
    $format = "Console";
    $output = "";
  }

  my $messageLength = 80;
  if ($args->{'-fmessage-length='}) {
    $messageLength = $args->{'-fmessage-length='};
  }

  my $allSuppress = join(',', @suppress);
  my $rvError = `sh -c 'command -v rv-error'`;
  chop($rvError);
  $rvError = quote(backslash($rvError));
  $encodedJson = quote(backslash(quote(backslash(
    "{\"suppressions\": [$allSuppress]" .
    ",\"message_length\": $messageLength" .
    ",\"format\": \"$format\"" .
    ",\"previous_errors\": []" .
    ",\"fatal_errors\": $fatalErrors" .
    ",\"rv_error\": $rvError" .
    "$output}"))));

  my $heapSize = "1G";
  if ($args->{'-Xmx'}) {
    $heapSize = $args->{'-Xmx'};
  }
  # Set heap and stack size of krun
  $ENV{K_OPTS} = "-Xmx$heapSize";
  if ($args->{'-d'}) {
    $ENV{OCAMLRUNPARAM} = "s=32M,b,l=8M";
    $File::Temp::KEEP_ALL = 1;
  } else {
    $ENV{OCAMLRUNPARAM} = "s=32M,l=8M";
  }

  if (!@srcFiles && !@objFiles) {
    error("no input files found.\n");
  }

  if ($args->{'-E'} || $args->{'-M'} || $args->{'-MM'}) {
    my $oval = $main::oflag;
    if ($oval) {
      if (scalar @srcFiles > 2) {
        error("cannot specify -o with -c or -E with multiple files.\n");
      }
    } else {
      $oval = '-';
    }
    return preprocess($oval, '/dev/null', $srcFiles[0], $srcFiles[1]);
  } elsif ($hasStdin) {
    error("-E or -x required when input is from standard input.\n");
  }

  if ($args->{'-c'}) {
    my $oval = $main::oflag;
    if ($oval) {
      if (scalar @srcFiles > 2) {
        error("cannot specify -o with -c or -E with multiple files.\n");
      }
      if (!$noLicense && $msg ne '') {
        printf "%s\n", $msg;
      }
      my $result = tempFile('compile');
      compile($result, $srcFiles[0], $srcFiles[1]);
      move($result, $oval);
    } else {
      if (!$noLicense && $msg ne '') {
        printf "%s\n", $msg;
      }
      for (my $i = 0; $i < $#srcFiles; $i += 2) {
        $oval = basename($srcFiles[$i], ".c", ".cc", ".cp", ".cxx", ".cpp", ".CPP", ".c++", ".C", ".h", ".hh", ".hp", ".hxx", ".hpp", ".HPP", ".h++", ".H", ".tcc") . ".o";
        my $result = tempFile('compile');
        compile($result, $srcFiles[$i], $srcFiles[$i+1]);
        move($result, $oval);
      }
    }
    return 0;
  }

  if ($args->{'-shared'}) {
    mergeObjs(1, 0);
    my $obj = tempFile('merge');
    execute('ld', '-r', '-o', $obj, @nativeObjFiles);
    execute(catfile($distDirectory, 'merge-kcc-obj'), $obj, $objFiles[0], $trampolineFiles[0], $main::oflag || 'a.out');
    return 0;
  }

  if (!$args->{'-nodefaultlibs'}) {
    $xLang = "none";
    classify(catfile($profileDirectory, 'lib', 'libc.so'));
    if ($args->{'-Xk++'}) {
      classify(catfile($profileDirectory, 'lib', 'libstdc++.so'));
    }
  }

  # Reduce our remaining source files to object files
  mergeObjs(0, 0);

  my $oval = $main::oflag || 'a.out';

  my $programConfFile = tempFile('conf');

  if (!$noLicense && $msg ne '') {
    printf "%s\n", $msg;
  }

  # At this point, we have 0 source files and 1 object file left for
  # the final calls to krun.
  my $retval = execute(getKRunCommand($programConfFile, \@objFiles, undef, 1, 'c++', undef, undef));
  checkError($retval, $programConfFile, 1);

  # add space to end of args with () so that batch scripts work on windows
  my @options = initOptions();
  if ($args->{'-flint'} || $args->{'-Wlint'}) {
    my $heapSize;
    if ($args->{'-fheap-size='}) {
      $heapSize = `echo $args->{'-fheap-size='} | sed -e 's/[Tt]/kg/i;s/[Gg]/km/i;s/[Mm]/kk/i;s/k/*1024/ig' | bc`;
      chop($heapSize);
    } else {
      $heapSize = 1024 * 1024 * 1024;
    }
    my $heapSizeInt = $heapSize;
    $heapSize = quote(backslash($heapSize));
    if ($cygwin) {
      $heapSize = backslash($heapSize);
    }
    my $stackSize;
    if ($args->{'-fstack-size='}) {
      $stackSize = `echo $args->{'-fstack-size='} | sed -e 's/[Tt]/kg/i;s/[Gg]/km/i;s/[Mm]/kk/i;s/k/*1024/ig' | bc`;
      chop($stackSize);
    } else {
      $stackSize = `bash -c 'ulimit -s'`;
      chop($stackSize);
      if ($stackSize eq 'unlimited') {
        $stackSize = $heapSizeInt;
      } else {
        $stackSize = $stackSize * 1024; # result was in kb
      }
    }
    $stackSize = quote(backslash($stackSize));
    if ($cygwin) {
      $stackSize = backslash($stackSize);
    }
    push(@options, "`Heap`(#token($heapSize, $quoteInt))");
    push(@options, "`Stack`(#token($stackSize, $quoteInt))");
  }
  my $opts = makeSet(@options);

  if ($args->{'-frunner-script'} || !$use_compile) {
    open(FILE, $programConfFile) or error("Couldn't open file: $!\n");
    my $programConf = join("", <FILE>);
    close(FILE);
    $programConf = encode_base64($programConf);
    open(FILE, catfile($distDirectory, 'program-runner')) or error("Couldn't open file: $!\n");
    my $template = join("", <FILE>);
    close(FILE);

    $template =~ s?EXTERN_SCRIPTS_DIR?$profileDirectory?g;
    $template =~ s?EXTERN_HEAP_SIZE?$heapSize?g;

    open(my $programRunner, '>', $oval) or error("Couldn't open file: $!\n");
    print $programRunner "$template\n";
    print $programRunner "sub linkedProgram {\nreturn <<'PROGRAMCONF';\n$programConf\nPROGRAMCONF\n}\n";
    if (@ldArgs) {
      print $programRunner "sub nativeLibraries {\n return '@ldArgs';\n}\n";
    } else {
      print $programRunner "sub nativeLibraries {\n return '';\n}\n";
    }

    if (@nativeObjFiles) {
      my $obj = tempFile('obj');
      execute('ld', '-r', '-o', $obj, @nativeObjFiles);
      open(FILE, $obj) or error("Couldn't open file: $!\n");
      my $programObj = join("", <FILE>);
      close(FILE);
      $programObj = encode_base64($programObj);
      print $programRunner "sub nativeObjFile {\nreturn <<'PROGRAMOBJ';\n$programObj\nPROGRAMOBJ\n}\n";
    } else {
      print $programRunner "sub nativeObjFile {\n return undef;\n}\n";
    }

    my $encodedJsonAsPerlString = quote(backslash($encodedJson));
    print $programRunner "sub getJson {\n return $encodedJsonAsPerlString;\n}\n";

    my $encodedOptsAsPerlString = quote(backslash($opts));
    print $programRunner "sub getOptions {\n return $encodedOptsAsPerlString;\n}\n";

    close($programRunner);
    my $numFilesChanged = chmod(0755, $oval);

    ($numFilesChanged == 1)
    or error("Call to chmod $oval failed.\n");
  } else {
    my $dir = catfile($profileDirectory, 'c11-cpp14-kompiled', 'c11-cpp14-kompiled');
    my $tempDir = tempDir('res');
    $retval = execute(catfile($dir, 'marshalvalue'),
      catfile($dir, 'realdef.cma'),
      '-c', 'ARGV', '`#argv`(.KList) ', 'text',
      '-c', 'OPTIONS', $opts, 'text',
      '-c', 'JSON', "#token($encodedJson, $quoteString)", 'text',
      '--output-file', catfile($tempDir, 'kore_term')
    );
    checkError($retval, $programConfFile, 1);
    $retval = execute(catfile($dir, 'marshalvalue'),
      catfile($dir, 'realdef.cma'), '-s', # -s before -c
      '-c', 'PGM', $programConfFile, 'binaryfile',
      '--output-file', catfile($tempDir, 'marshal_term')
    );
    checkError($retval, $programConfFile, 1);

    open(my $pluginPath, '>', catfile($tempDir, "plugin_path")) or error("Couldn't open file: $!\n");
    print $pluginPath catfile($dir, 'realdef.cma');
    close($pluginPath);

    my $compiler;
    if ($args->{'-Xk++'}) {
      $compiler = 'g++';
    } else {
      $compiler = 'gcc';
    }


    if ($args->{'-fnative-binary'}) {
      my $dir = catfile($profileDirectory, 'native-server');
      execute("cat '$trampolineFiles[0]' | awk -F '\t' '{if (\$1!=\"\") print \$1; }' | " . catfile($distDirectory, "make-trampolines") . " > '$tempDir/trampolines.h'");
      execute("cat '$trampolineFiles[0]' | awk -F '\t' '{if (\$2!=\"\") print \$2; }' > '$tempDir/used_symbols'");
      execute("(cat '$trampolineFiles[0]' | awk -F '\t' '{if (\$1!=\"\") print \"__\" \$1; }'; comm -12 '$tempDir/used_symbols' '$symbols') | sort | uniq | " . catfile($distDirectory, "make-symbols") . " > '$tempDir/symbols.c'");
      my @cmd = ($compiler, '-fsanitize=undefined', '-o', "$tempDir/native_binary",
                         catfile($dir, 'main.o'),
                         catfile($dir, 'platform.o'),
                         catfile($dir, 'server.c'),
                         '-I', $dir, '-I', $tempDir, "-w", "-g",
                         @ldArgs);
      my $retval = execute(@cmd);
      checkError($retval, $programConfFile, 1);
    } else {
      system("touch", "$tempDir/native_binary");
    }

    my $old_cwd = getcwd();
    chdir($tempDir);
    $retval = execute('ld', '-r', '-b', 'binary', '-o', 'kore_term.o', 'kore_term');
    checkError($retval, $programConfFile, 1);
    $retval = execute('ld', '-r', '-b', 'binary', '-o', 'marshal_term.o', 'marshal_term');
    checkError($retval, $programConfFile, 1);
    $retval = execute('ld', '-r', '-b', 'binary', '-o', 'plugin_path.o', 'plugin_path');
    checkError($retval, $programConfFile, 1);
    $retval = execute('ld', '-r', '-b', 'binary', '-o', 'native_binary.o', 'native_binary');
    checkError($retval, $programConfFile, 1);
    chdir($old_cwd);
    
    my @cmd = ($compiler, catfile($dir, 'execution_partial.o'), '-o', $oval, '-Wl,-E',
               catfile($tempDir, 'kore_term.o'),
               catfile($tempDir, 'marshal_term.o'),
               catfile($tempDir, 'plugin_path.o'),
               catfile($tempDir, 'native_binary.o'),
               @ldArgs);
    checkError(execute(@cmd), $programConfFile, 1);
  }

  return 0;
}

sub mergeObjs {
  my ($mergeObjs, $numSrc) = (@_);

  my @pids = ();

  while (scalar @srcFiles > $numSrc * 2) {
    my $oval = tempFile('merge');
    my $input = shift @srcFiles;
    my $lang = shift @srcFiles;
    compile($oval, $input, $lang);
    classify($oval)
  }

  if ($mergeObjs) {
    my $accum = tempFile('merge');
    my @cmd = getKRunCommand($accum, \@objFiles, undef, 0, 'c++', undef, undef);
    checkError(execute(@cmd), $accum, 1);
    @objFiles = ($accum);
  }

  my $trampolines = tempFile('trampolines');
  my $cmd = "cat @trampolineFiles | sort | uniq > '$trampolines'";
  if ($args->{'-d'}) {
    print("$cmd\n");
  }
  execute($cmd);
  @trampolineFiles = ($trampolines);
}

sub isKObj {
  my $filename = shift;
  open(my $file, $filename) or return 0;
  my $buf;
  seek($file, -5, SEEK_END);
  read($file, $buf, 5);
  close($file);
  return $buf eq $MAGIC;
}

sub isAr {
  my $filename = shift;
  return (execute("ar t $filename > /dev/null 2>&1") == 0);
}

sub classifyLib {
  my $lib = shift;
  my @files = ();
  my $isK = 0;
  for (@ld_lib) {
    my $candidate = catfile($_, "lib$lib.so");
    if (-e $candidate) {
      push(@files, $candidate);
      $isK = 1;
      last;
    }
    $candidate = catfile($_, "lib$lib.a");
    if (-e $candidate) {
      push(@files, $candidate);
      $isK = 1;
      last;
    }
  }
  if (!$isK) {
    push(@ldArgs, "-l$lib");
  } else {
    classify(@files);
  }
}

sub classify {
  my @files = @_;

  for (@files) {
    my $lang = $xLang;
    if ($lang eq 'none') {
      if ($_ eq '-') {
        $hasStdin = 1;
        $lang = 'c';
      } else {
        my ($base, $dir, $suffix) = fileparse($_,
          ('\.c', '\.cc', '\.cp', '\.cxx', '\.cpp', '\.CPP', '\.c++',
           '\.C', '\.h', '\.hh', '\.hp', '\.hxx', '\.hpp', '\.HPP',
           '\.h++', '\.H', '\.tcc', '\.s', '\.S', '\.sx'));
        if ($suffix eq '.c' or $suffix eq '.h') {
          $lang = 'c';
        } elsif ($suffix eq '.s') {
          $lang = 'assembler';
        } elsif ($suffix eq '.S' or $suffix eq '.sx') {
          $lang = 'assembler-with-cpp';
        } elsif ($suffix ne '') {
          $lang = 'c++';
        }
      }
    }

    if ($lang eq 'assembler' or $lang eq 'assembler-with-cpp') {
      push(@srcFiles, $_, $lang);
    } elsif ($lang eq 'c' or $lang eq 'c-header') {
      push(@srcFiles, $_, 'c');
    } elsif ($lang eq 'c++' or $lang eq 'c++-header') {
      push(@srcFiles, $_, 'c++');
    } elsif ($lang ne 'none') {
      error("Unsupported -x option: $lang\n");
    } elsif (isAr($_)) {
      my ($base, $dir, $suffix) = fileparse($_);
      extractStatic($_, $base, $suffix);
    } elsif (isKObj($_)) {
      my $kast = tempFile('kast');
      my $obj = tempFile('obj');
      my $trampolines = tempFile('trampolines');
      execute(catfile($distDirectory, 'split-kcc-obj'), $_, $obj, $kast, $trampolines);
      push(@objFiles, $kast);
      push(@nativeObjFiles, $obj);
      push(@trampolineFiles, $trampolines);
      push(@ldArgs, $obj);
    } elsif (isNativeObj($_) or -e $_) {
      push(@nativeObjFiles, $_);
      push(@ldArgs, $_);
    } else {
      if (!($_ =~ $ignoredFlags)) {
        warn("Unsupported option: $_\n");
      }
    }
  }
}

sub isNativeObj {
  my ($file) = (@_);
  return (execute("nm $file > /dev/null 2>&1") == 0);
}

sub extractStatic {
  my ($file, $basename, $suffix) = (@_);
  -e $file or error("$file does not exist.\n");
  my $tempDir = tempDir('ar');
  copy ($file, $tempDir);
  if (execute("cd $tempDir && ar -x $basename$suffix")) {
    error("failed to run ar -x.\n");
  }
  opendir my $dir, $tempDir or error("Cannot open directory: $tempDir\n");
  my @files = readdir $dir;
  closedir $dir;
  my @repackageObjs = ();
  for (@files) {
    if ($_ ne "$basename$suffix" && $_ ne "." && $_ ne "..") {
      if (isKObj(catfile($tempDir, $_))) {
        my $kast = tempFile("ar-kast-$_");
        my $obj = tempFile("ar-obj-$_");
        my $trampolines = tempFile("ar-trampolines-$_");
        execute(catfile($distDirectory, 'split-kcc-obj'), catfile($tempDir, $_), $obj, $kast, $trampolines);
        push(@objFiles, $kast);
        push(@trampolineFiles, $trampolines);
        push(@repackageObjs, $obj);
      } else {
        push(@repackageObjs, catfile($tempDir, $_));
      }
    }
  }
  if (scalar @repackageObjs) {
    my $repackaged = tempFile('repackaged', "-$basename");
    execute('ar', 'rcs', $repackaged,  @repackageObjs);
    push(@nativeLibs, $repackaged);
    push(@ldArgs, $repackaged);
  }
}

sub compile {
  my ($oval, $inputFile, $lang) = (@_);
  my @arr = ();
  if ($lang eq 'c' or $lang eq 'c++') {
    my $kast = tempFile('kast');
    my $obj = tempFile('obj');
    my $trampolines = tempFile('trampolines');
    my $uuid = create_uuid_as_string();
    my $retval = execute(getKRunCommand($kast, \@arr, $inputFile, 0, $lang, $uuid, $trampolines));
    checkError($retval, $kast, 1);
    my $compiler = 'gcc';
    if ($args->{'-Xk++'}) {
      $compiler = 'g++';
    }
    if ($args->{'-fno-native-compilation'}) {
      execute($compiler, '-c', getStd($lang), '-x', $lang, '/dev/null', '-o', $obj);
    } else {
      $retval = execute($compiler, '-c', getStd($lang), '-x', $lang, $inputFile, '-o', $obj, @cppArgs);
      checkError($retval, $obj, 0);
      execute(catfile($distDirectory, 'globalize-syms'), $uuid, $obj);
    }
    execute('objcopy', '--redefine-sym', "main=$RVMAIN", $obj);
    execute(catfile($distDirectory, 'merge-kcc-obj'), $obj, $kast, $trampolines, $oval);
  } else {
    my $retval = execute('gcc', '-c', '-x', $lang, $inputFile, '-o', $oval, @cppArgs);
    checkError($retval, $oval, 0);
  }
}

sub pushObj {
  my ($arr, $obj, $i) = (@_);

  if (defined $obj) {
    push(@{$_[0]}, "-pOBJ$i=cat");
    push(@{$_[0]}, "-cOBJ$i=$obj");
  } else {
    push(@{$_[0]}, "-pOBJ$i=$printf");
    push(@{$_[0]}, "-cOBJ$i=.K");
  }
}


sub initOptions {
  my @options = ();
  if ($args->{'-fno-native-compilation'}) {
    push(@options, "`NoNativeFallback`(.KList)");
  }
  if ($args->{'-frecover-all-errors'}) {
    push(@options, "`RecoverAll`(.KList)");
  }
  if ($args->{'-fuse-native-std-lib'}) {
    push(@options, "`UseNativeStdLib`(.KList)");
  }
  if ($args->{'-flint'} || $args->{'-Wlint'}) {
    push(@options, "`Lint`(.KList)");
  }
  @options
}

sub add_arg {
  my ($name, $value, $category, @krun_args) = (@_);

  if ($use_interpreter) {
    push(@krun_args, '-c', $name, $value, $category);
  } else {
    push(@krun_args, "-c$name=$value");
    if ($category eq 'text' or $category eq 'binary') {
      push(@krun_args, "-p$name=$printf");
    } else {
      push(@krun_args, "-p$name=cat");
    }
  }
  return @krun_args;
}

sub getKRunCommand {
  my ($output, $objsRef, $src, $link, $lang, $uuid, $trampolines) = (@_);
  my @objs = @$objsRef;

  my @krun_args;
  $symbols = $link ? dumpSymbols() : 'dummy';
  if ($use_interpreter) {
    my $dir = $lang eq 'c++' ? catfile($CPP_TRANS_DEF, 'cpp14-translation-kompiled') : catfile($C_TRANS_DEF, 'c11-translation-kompiled');
    @krun_args = (
      catfile($dir, 'interpreter'),
      catfile($dir, 'realdef.cma'),
      $symbols,
      '--output-file', $output,
    );
  } else {
    @krun_args = (
      $krun,
      '--output', 'binary',
      '--output-file', $output,
      '-d', $lang eq 'c++' ? $CPP_TRANS_DEF : $C_TRANS_DEF,
      '-w', 'none',
      '--smt', 'none',
      '--argv', $symbols
    );

    if ($args->{'-d'}) {
      push(@krun_args, '--debug');
    }
  }

  if ($args->{'-ftranslation-depth='}) {
    push(@krun_args, '--depth');
	push(@krun_args, $args->{'-ftranslation-depth='});
  }
  my @options = initOptions();
  if (!$hasBuiltins && $args->{'-Xbuiltins'}) {
    push(@options, "`XBuiltins`(.KList)");
    $hasBuiltins = 1;
  }
  if (!$link) {
    push(@options, "`NoLink`(.KList)");
  }

  my $opts = makeSet(@options);
  my $json = "#token($encodedJson, $quoteString)";

  @krun_args = add_arg("OPTIONS", $opts, 'text', @krun_args);
  @krun_args = add_arg("JSON", $json, 'text', @krun_args);

  if (!defined $uuid) {
      $uuid = create_uuid_as_string();
  }
  my $encodedUuid = quote(backslash(quote($uuid)));
  my $uuidOpt = "#token($encodedUuid, $quoteString)";
  @krun_args = add_arg("UUID", $uuidOpt, 'text', @krun_args);

  if (scalar @objs) {
    my $allObjsFile = tempFile('all-objs');
    my @catArgs = ();
    my @objTexts = ();
    for (my $i = 0; $i < scalar @objFiles; $i++) {
      my $thisObj = do {
        local $/ = undef;
        open my $fh, '<', $objFiles[$i];
        <$fh>;
      };
      if (length $thisObj) {
        # push(@objTexts, "`unwrapObj`($thisObj)");
        $thisObj = substr($thisObj, 8, -1);
        # wrap $thisObj with `unwrapObj`()
        push(@objTexts, "$thisObj\x02\x00\x00\x00\x00\x00\x00\x00\x09\x00u\x00n\x00w\x00r\x00a\x00p\x00O\x00b\x00j\x00\x00\x00\x00\x01");
      }
    }
    my $objText = join('', @objTexts);
    my $one = chr((scalar @objTexts >> 24) & 0xff);
    my $two = chr((scalar @objTexts >> 16) & 0xff);
    my $three = chr((scalar @objTexts >> 8) & 0xff);
    my $four = chr((scalar @objTexts >> 0) & 0xff);
    $objText = "$MAGIC\x04\x00\x01$objText\x03$one$two$three$four\x07";
    open(my $file, '>', "$allObjsFile");
    print $file $objText;
    close $file;

    @krun_args = add_arg("OBJS", $allObjsFile, 'binaryfile', @krun_args);
  } else {
    @krun_args = add_arg("OBJS", ".K", 'text', @krun_args);
  }
  if (defined $src) {
    my $kast = parse($src, $lang, $trampolines);
    @krun_args = add_arg("PGM", $kast, 'textfile', @krun_args);
  } else {
    @krun_args = add_arg("PGM", ".K", 'text', @krun_args);
  }

  return @krun_args;
}

sub dumpSymbols {
  my $ret = tempFile('syms');
  execute(catfile($distDirectory, 'gccsymdump') . " @ldArgs > $ret");
  return rel2abs($ret);
}

sub preprocess {
  my ($output, $trampolines, $inputFile, $lang) = (@_);
  my $isStdout = 0;
  if ($output eq '-') {
    $output = tempFile('pp');
    $isStdout = 1;
  }
  my $directoryname = dirname($inputFile);
  if (!$args->{'-no-pedantic'}) {
    push(@main::cppArgs, '-pedantic');
  }
  if ($lang eq 'c++') {
    my @ppArgs = (catfile($profileDirectory, 'cpp-pp'),
      @main::cppArgs, getStd($lang), $inputFile, '-o', $output);

    return execPreprocess($output, $isStdout, $lang, $trampolines, @ppArgs);
  }

  my @ppArgs = (catfile($profileDirectory, 'pp'),
    @main::cppArgs, getStd($lang), $inputFile, '-o', $output);

  return execPreprocess($output, $isStdout, $lang, $trampolines, @ppArgs);
}

sub execPreprocess {
  my ($output, $isStdout, $lang, $trampolines, @ppArgs) = (@_);
  my $retval = execute(@ppArgs);
  if (!$retval) {
    if ($args->{'-fnative-binary'}) {
      my $cmd = "set -o pipefail && " . catfile($distDirectory, "call-sites") . " '$output' --char=sc -- -x $lang | sort | uniq > '$trampolines'";
      my $callSitesRetval = execute("/bin/bash", "-c", $cmd);
      checkError($callSitesRetval, $output, 0);
    } else {
      system('touch', $trampolines)
    }
    execute("rv-ifdefclear", $output);
    for (@ifdef) {
      execute("rv-ifdefall", $output, @$_);
    }
    if ($isStdout) {
      execute("cat", $output);
    }
  }
  return $retval;
}

sub execute {
  my @cmd = @_;
  if ($args->{'-d'}) {
    print(join(" ", @cmd) . "\n");
  }
  system(@cmd);
  return $? >> 8;
}

my $tempRoot;
sub tempFile {
  my ($name, $ext) = (@_);

  if (!defined $tempRoot) {
    $tempRoot = tempdir(".tmp-kcc-XXXXX", CLEANUP => 1);
  }

  my $file;
  if (defined $ext) {
    (undef, $file) = tempfile(catfile($tempRoot, "$name-XXXXX"), UNLINK => 1, OPEN => 0, SUFFIX => $ext);
  } else {
    (undef, $file) = tempfile(catfile($tempRoot, "$name-XXXXX"), UNLINK => 1, OPEN => 0);
  }
  return $file;
}

sub tempDir {
  my ($name) = (@_);

  if (!defined $tempRoot) {
    $tempRoot = tempdir(".tmp-kcc-XXXXX", CLEANUP => 1);
  }

  my $dir = tempdir(catfile($tempRoot, "tmp-kcc-$name-XXXXX"), CLEANUP => 1);

  return $dir;
}

sub parse {
  my ($inputFile, $lang, $trampolines) = (@_);

  my $ppResult = tempFile('pp');
  my $kast = tempFile('kast');
  checkError(preprocess($ppResult, $trampolines, $inputFile, $lang), $ppResult, 0);

  if ($lang eq 'c++') {
    my $std = getStd('c++');
    my $cmd = ("$cppparser $ppResult -- -x c++-cpp-output $std > $kast");
    checkError(execute($cmd), $kast, 0);

    return $kast;
  }
  my $cmd = ("$cparser $ppResult --trueName '$inputFile' > $kast");
  checkError(execute($cmd), $kast, 0);

  return $kast;
}

sub getStd {
  my ($lang) = (@_);

  my $std;
  if (defined $args->{'-std='}) {
    $std = $args->{'-std='};
  } elsif ($lang eq 'c++') {
    $std = 'c++14';
  } elsif ($lang eq 'c') {
    $std = 'c11';
  } else {
    return '';
  }
  return "-std=$std";
}

sub checkError {
  my ($retval, $output, $isBinary) = (@_);
  if ($retval) {
    if ($isBinary && !$isRelease ) {
      execute("k-bin-to-text", $output, 'kcc_config');
    } else {
      copy($output, 'kcc_config');
    }
    print STDERR "Translation failed";
    if (-e 'kcc_config') {
      print STDERR " (kcc_config dumped). ";
    } else {
      print STDERR ". ";
    }
    if ($args->{'-d'}) {
      print STDERR "Refer to last command run for details.\n";
      exit $retval;
    } else {
      my $dir = basename(getcwd());
      print STDERR "To repeat, run this command in directory $dir:\n$0 -d @originalArgv\n";
      exit $retval;
    }
  }
}

sub makeSet {
  my $set = '`.Set`(.KList)';
  foreach my $el (@_) {
    $set = "`_Set_`(`SetItem`($el), $set)";
  }
  return $set;
}

sub interruptHandler {
  # Call single cleanup point.
  finalCleanup();
  # Since we were interrupted, we should exit with a non-zero code.
  exit 1;
}

# This subroutine can be used as a way to ensure we clean up all resources
# whenever we exit. This is going to be mostly temp files. If the program
# terminates for almost any reason, this code will be executed.
sub finalCleanup { }

sub error {
  print STDERR @_;
  exit 1;
}

# This block gets run at the end of a normally terminating program, whether it
# simply exits, or dies. We use this to clean up.
END {
  # $? contains the value the program would normally have exited with.
  my $retval = $?;
  # Call single cleanup point.
  finalCleanup();
  exit $retval;
}

